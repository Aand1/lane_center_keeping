/*
 * people_detection.cpp
 *
 *  Created on: Oct 26, 2016
 *      Author: aicrobo
 */
#include "lane_center_keeping/people_detection.h"
#include<pcl/kdtree/kdtree.h>
#include<pcl/segmentation/extract_clusters.h>

#include<lane_center_keeping/obstacle_info_msg.h>

namespace lane_center_keeping
{

  PeopleDetection::PeopleDetection(ros::NodeHandle nh, ros::NodeHandle priv_nh)
  {
    // get parameters using private node handle
    priv_nh.param("cell_size", m_per_cell_, 0.3);
    priv_nh.param("full_clouds", full_clouds_, true);
    priv_nh.param("grid_dimensions", grid_dim_, 320);
    priv_nh.param("height_threshold", height_diff_threshold_, 0.3);

    // Set up publishers
   // obstacle_publisher_ = nh.advertise<VPointCloud>("velodyne_obstacles",1);
   // clear_publisher_ = nh.advertise<VPointCloud>("velodyne_clear",1);
    marker_pub_ = nh.advertise<visualization_msgs::Marker>("marker_array", 1, true);
    object_pub_=nh.advertise<lane_center_keeping::obstacle_info_msg>("object",1,true);
    // subscribe to Velodyne data points
    velodyne_scan_ = nh.subscribe("ground_cloud", 1,
                                    &PeopleDetection::processData, this,
                                    ros::TransportHints().tcpNoDelay(true));
  }

  PeopleDetection::~PeopleDetection() {}

  /** point cloud input callback */
  void PeopleDetection::processData(const VPointCloud::ConstPtr &scan)
  {

   // if ((obstacle_publisher_.getNumSubscribers() == 0)
     //  && (clear_publisher_.getNumSubscribers() == 0))
     // return;

    // pass along original time stamp and frame ID
    obstacle_cloud_.header.stamp = scan->header.stamp;
    obstacle_cloud_.header.frame_id = scan->header.frame_id;

    // pass along original time stamp and frame ID
    clear_cloud_.header.stamp = scan->header.stamp;
    clear_cloud_.header.frame_id = scan->header.frame_id;

    // set the exact point cloud size -- the vectors should already have
    // enough space
    size_t npoints = scan->points.size();
    obstacle_cloud_.points.resize(npoints);
    //obstacle_cloud_.channels[0].values.resize(npoints);

    clear_cloud_.points.resize(npoints);
    //clear_cloud_.channels[0].values.resize(npoints);

    size_t obs_count=0;
    size_t empty_count=0;
    // either return full point cloud or a discretized version
    if (full_clouds_)
    {
    	 float min[grid_dim_][grid_dim_];
    	 float max[grid_dim_][grid_dim_];
    	 bool init[grid_dim_][grid_dim_];
    	 memset(&init, 0, grid_dim_*grid_dim_);

    	 for (unsigned i = 0; i < npoints; ++i)
    	 {
    	      int x = ((grid_dim_/2)+scan->points[i].x/m_per_cell_);
    	      int y = ((grid_dim_/2)+scan->points[i].y/m_per_cell_);
    	      if (x >= 0 && x < grid_dim_ && y >= 0 && y < grid_dim_)
    	      {
    	        if (!init[x][y])
    	        {
    	          min[x][y] = scan->points[i].z;
    	          max[x][y] = scan->points[i].z;
    	          init[x][y] = true;
    	        } else
    	        {
    	          min[x][y] = std::min(min[x][y], scan->points[i].z);
    	          max[x][y] = std::max(max[x][y], scan->points[i].z);
    	        }
    	      }
    	    }
    	    // display points where map has height-difference > threshold

    	    for (unsigned i = 0; i < npoints; ++i)
    	    {
    	      int x = ((grid_dim_/2)+scan->points[i].x/m_per_cell_);
    	      int y = ((grid_dim_/2)+scan->points[i].y/m_per_cell_);
    	      if (x >= 0 && x < grid_dim_ && y >= 0 && y < grid_dim_ && init[x][y])
    	      {
    	        if (max[x][y]<0.2&&(max[x][y] - min[x][y] > height_diff_threshold_)&&(max[x][y] - min[x][y]<2.2))
    	        {
    	          obstacle_cloud_.points[obs_count]=scan->points[i];
    	          obs_count++;
    	        }
    	        else
    	        {
    	          clear_cloud_.points[empty_count]=scan->points[i];
    	          empty_count++;
    	        }
    	      }
    	    }
    }
    
    else
    {
 
		float min[grid_dim_][grid_dim_];
		float max[grid_dim_][grid_dim_];
		float num_obs[grid_dim_][grid_dim_];
		float num_clear[grid_dim_][grid_dim_];
		bool init[grid_dim_][grid_dim_];

		//memset(&init, 0, grid_dim_*grid_dim_);

		for (int x = 0; x < grid_dim_; x++)
		{
			for (int y = 0; y < grid_dim_; y++)
			{
				init[x][y] = false;
				num_obs[x][y] = 0;
				num_clear[x][y] = 0;
			}
		}

		// build height map
		for (unsigned i = 0; i < npoints; ++i)
		{
			int x = ((grid_dim_ / 2) + scan->points[i].x / m_per_cell_);
			int y = ((grid_dim_ / 2) + scan->points[i].y / m_per_cell_);
			if (x >= 0 && x < grid_dim_ && y >= 0 && y < grid_dim_)
			{
				if (!init[x][y])
				{
					min[x][y] = scan->points[i].z;
					max[x][y] = scan->points[i].z;
					num_obs[x][y] = 0;
					num_clear[x][y] = 0;
					init[x][y] = true;
				}
				else
				{
					min[x][y] = std::min(min[x][y], scan->points[i].z);
					max[x][y] = std::max(max[x][y], scan->points[i].z);
				}
			}
       }
    }

    obstacle_cloud_.points.resize(obs_count);
    clear_cloud_.points.resize(empty_count);

    if(obstacle_cloud_.points.size()<2)
    {

      lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
      object_msg->obstacle_property = 0;
      object_pub_.publish(object_msg);
      std::cout << "******************" << std::endl;
      return;
    }
    else
    {
        std::vector<pcl::PointIndices> cluster_indices;
        pcl::search::KdTree<pcl::PointXYZI>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZI>);

        tree->setInputCloud(obstacle_cloud_.makeShared());
        pcl::EuclideanClusterExtraction<pcl::PointXYZI> ec;
        ec.setClusterTolerance(2);
        ec.setMinClusterSize(2);
        ec.setSearchMethod(tree);
        ec.setInputCloud(obstacle_cloud_.makeShared());
        ec.extract(cluster_indices);
      
        if(cluster_indices.size()==0)
        {
          lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
          object_msg->obstacle_property = 0;
          object_pub_.publish(object_msg);
          return;
        }
        else
        {
          for(std::vector<pcl::PointIndices>::const_iterator it = cluster_indices.begin(); it != cluster_indices.end(); it++)
          {
              float min_x = std::numeric_limits<float>::max();
              float max_x = std::numeric_limits<float>::min();
              float min_y = std::numeric_limits<float>::max();
              float max_y = std::numeric_limits<float>::min();
              float min_z = std::numeric_limits<float>::max();
              float max_z = std::numeric_limits<float>::min();
              Eigen::Vector3f sum(0.0,0.0,0.0);
              pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_cluster(new pcl::PointCloud<pcl::PointXYZI>);
              for (std::vector<int>::const_iterator pit = it->indices.begin(); pit != it->indices.end(); pit++)
              {
                pcl::PointXYZI point = obstacle_cloud_.points[*pit];

                min_x = std::min(min_x, point.x);
                min_y = std::min(min_y, point.y);
                min_z = std::min(min_z, point.z);

                max_x = std::max(max_x, point.x);
                max_y = std::max(max_y, point.y);
                max_z = std::max(max_z, point.z);

                sum[0] = sum[0] + point.x;
                sum[1] = sum[1] + point.y;
                sum[2] = sum[2] + point.z;
                cloud_cluster->points.push_back(point);
              }

                size_t num_cluster_cloud = cloud_cluster->points.size();
                sum[0] = sum[0] / num_cluster_cloud;
                sum[1] = sum[1] / num_cluster_cloud;
                sum[2] = sum[2] / num_cluster_cloud;
                float diff_y = max_y - min_y;
                if(std::abs(sum[1])>1.85&&diff_y<1)
                {
                   continue;
                }
                float diff_z = max_z - min_z;
                if((diff_z>2.1||max_z>0.2)&&sum[0]>3)
                {
                  continue;
                }
                float diff_x = max_x - min_x;

                OBSTACLE_OBJECT object;
                object.center_position =sum;
                object.height = diff_z;
                object.width = diff_y;
                object.length = diff_x;
                object.num_of_points=num_cluster_cloud;
                obstacle_object_.push_back(object);
          }
         size_t num_of_obstacle=obstacle_object_.size();
          if(num_of_obstacle==0)
          {
            lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
            object_msg->obstacle_property =0;
            object_pub_.publish(object_msg);
            return;
          }
          else
          {
               OBSTACLE_OBJECT object;
               if (num_of_obstacle == 1)
                {
                   object = obstacle_object_[0];
                }
               else
                {
                   std::vector<float> index_x;
                   for (size_t i = 0; i < num_of_obstacle; i++)
                   {
                       index_x.push_back(float(obstacle_object_[i].center_position[0]));
                    }
                    std::sort(index_x.begin(), index_x.end());
                    object = obstacle_object_[index_x[0]];
                 }

              obstacle_object_.clear();
              obstacle_object_.swap(obstacle_object_);

              float position_x=object.center_position[0];

              if(object.height<0.3||object.height>2.3)
              {
                lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
                object_msg->obstacle_property = 0;
                object_pub_.publish(object_msg);
               return;
              }
              else
              {

                if(position_x>=20&&position_x<30&&object.num_of_points>10)
                {
                   lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
                    std::cout << "position_x>=20&&position_x<30" << std::endl;
                    object_msg->position.x=object.center_position[0];
                    object_msg->position.y=object.center_position[1];
                    object_msg->position.z=object.center_position[2];
                    object_msg->obstacle_property=0;
                    object_pub_.publish(object_msg);

                    people_marker.ns = "people";
                    people_marker.header.frame_id = scan->header.frame_id;
                    people_marker.header.stamp = ros::Time();
                    people_marker.type = visualization_msgs::Marker::SPHERE;
                    people_marker.action = visualization_msgs::Marker::ADD;
                    people_marker.pose.position.x = object.center_position[0];
                    people_marker.pose.position.y = object.center_position[1];
                    people_marker.pose.position.z = -2;
                    people_marker.pose.orientation.x = 0.0;
                    people_marker.pose.orientation.y = 0.0;
                    people_marker.pose.orientation.z = 0.0;
                    people_marker.pose.orientation.w = 1.0;
                    people_marker.scale.x = 0.2;
                    people_marker.scale.y = 0.3;
                    people_marker.scale.z = 1.5;
                    people_marker.color.a = 1.0;
                    people_marker.color.r = 1;
                    people_marker.color.g = 0;
                    people_marker.color.b = 0;
                    people_marker.frame_locked = true;
                    people_marker.points.clear();
                    people_marker.id = 1;
                    // tmp_marker_array.markers.push_back(people_marker);
                    marker_pub_.publish(people_marker);
                    return;
                }
                else if (position_x > 15 && position_x < 20 && object.num_of_points > 15)
                {
                  lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
                  std::cout << "position_x > 15 && position_x < 20" << std::endl;
                  object_msg->position.x = object.center_position[0];
                  object_msg->position.y = object.center_position[1];
                  object_msg->position.z = object.center_position[2];
                  object_msg->obstacle_property = 0;
                  object_pub_.publish(object_msg);

                  people_marker.ns = "people";
                  people_marker.header.frame_id = scan->header.frame_id;
                  people_marker.header.stamp = ros::Time();
                  people_marker.type = visualization_msgs::Marker::SPHERE;
                  people_marker.action = visualization_msgs::Marker::ADD;
                  people_marker.pose.position.x = object.center_position[0];
                  people_marker.pose.position.y = object.center_position[1];
                  people_marker.pose.position.z = -2;
                  people_marker.pose.orientation.x = 0.0;
                  people_marker.pose.orientation.y = 0.0;
                  people_marker.pose.orientation.z = 0.0;
                  people_marker.pose.orientation.w = 1.0;
                  people_marker.scale.x = 0.2;
                  people_marker.scale.y = 0.3;
                  people_marker.scale.z = 1.5;
                  people_marker.color.a = 1.0;
                  people_marker.color.r = 1;
                  people_marker.color.g = 0;
                  people_marker.color.b = 0;
                  people_marker.frame_locked = true;
                  people_marker.points.clear();
                  people_marker.id = 1;
                  // tmp_marker_array.markers.push_back(people_marker);
                  marker_pub_.publish(people_marker);
                  return;
                }
                else if(position_x>=1.5&&position_x<=15&&object.num_of_points>20)
                {
                	float length=object.length;
                	float width=object.width;
                	width=std::max(length,width);
                	if(width>0.35&&width<1.2&&object.height<2&&object.center_position[2]>-1.5)
                	{
                	     lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
		             std::cout << "######################position_x>=1.5&&position_x<=15#######people############" << std::endl;
		             object_msg->position.x=object.center_position[0];
		             object_msg->position.y=object.center_position[1];
		             object_msg->position.z=object.center_position[2];
		             object_msg->obstacle_property=1;
		             object_pub_.publish(object_msg);
		             people_marker.ns = "people";
		             people_marker.header.frame_id = scan->header.frame_id;
		             people_marker.header.stamp = ros::Time();
		             people_marker.type = visualization_msgs::Marker::SPHERE;
		             people_marker.action = visualization_msgs::Marker::ADD;
                             people_marker.pose.position.x = object.center_position[0];
					 people_marker.pose.position.y = object.center_position[1];
					 people_marker.pose.position.z = object.center_position[2];
					 people_marker.pose.orientation.x = 0.0;
					 people_marker.pose.orientation.y = 0.0;
					 people_marker.pose.orientation.z = 0.0;
					 people_marker.pose.orientation.w = 1.0;
					 people_marker.scale.x = 0.2;
					 people_marker.scale.y = 0.3;
					 people_marker.scale.z = 1.5;
					 people_marker.color.a = 1.0;
					 people_marker.color.r = 1;
					 people_marker.color.g = 0;
					 people_marker.color.b = 0;
					 people_marker.frame_locked = true;
					 people_marker.points.clear();
					 people_marker.id = 1;
					  // tmp_marker_array.markers.push_back(people_marker);
					  marker_pub_.publish(people_marker);
					  return;
					 
                	}
                	else if(width>1.6&&width<=3.7&&object.height>0.5&&object.height<2.2&&object.center_position[2]>-1.5)
                	{

                               lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);                		 
std::cout << "######################position_x>=1.5&&position_x<15####car###############" << std::endl;
                		 object_msg->position.x=object.center_position[0];
                		 object_msg->position.y=object.center_position[1];
                		 object_msg->position.z=object.center_position[2];
                		 object_msg->obstacle_property=2;
                		 if (object_pub_.getNumSubscribers() > 0)
                		 object_pub_.publish(object_msg);
return;
                	}
                }
                else
                {
                  lane_center_keeping::obstacle_info_msgPtr object_msg(new lane_center_keeping::obstacle_info_msg);
                  object_msg->obstacle_property = 0;
                  object_pub_.publish(object_msg);
                }
              }

          }

        }
      }

    }
} // namespace lane_center_keeping
